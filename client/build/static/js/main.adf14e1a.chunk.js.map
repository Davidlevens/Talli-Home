{"version":3,"sources":["redux/reducers/user.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","pages/Splash.jsx","redux/actions.js","api/protectedAPI.js","api/index.js","components/Form/index.js","pages/Login/index.jsx","components/DeleteBtn/index.js","components/Jumbotron/index.js","components/Grid/index.js","components/List/index.js","pages/Books.js","pages/Detail.js","pages/NoMatch.js","components/Nav/index.js","pages/Signup/index.jsx","App.js","serviceWorker.js","index.js"],"names":["setUserDetails","jot","JotBrowser","getToken","firstName","getClaim","role","id","initialState","details","rootState","user","userState","combineReducers","state","action","type","payload","tokens","refresh","eject","refreshJot","configureStore","preloadedState","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Splash","props","Container","Row","Col","Jumbotron","fluid","className","Button","onClick","history","push","onLogin","onLogout","getBooks","axiosP","get","getBook","deleteBook","delete","saveBook","bookData","post","axios","create","baseURL","getAuthHeaderAsync","valid","Promise","resolve","makeAuthHeader","token","then","res","data","success","reject","errors","Authorization","interceptors","request","use","config","a","async","source","CancelToken","authHeader","store","dispatch","cancel","cancelToken","headers","signup","newUser","login","credentials","protectedAPI","Input","TextArea","rows","FormBtn","style","float","marginBottom","children","ServerError","axiosError","response","errorObj","statusText","status","error","Alert","variant","name","message","schema","yup","username","required","password","connect","Modal","show","onHide","animation","size","aria-labelledby","centered","Header","closeButton","Title","Body","initialValues","validationSchema","onSubmit","values","formikBag","API","setErrors","setStatus","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","noValidate","Group","as","controlId","Label","Control","autoComplete","placeholder","onChange","onBlur","value","isInvalid","Feedback","disabled","to","DeleteBtn","tabIndex","height","clear","paddingTop","textAlign","split","map","join","List","ListItem","Books","books","title","author","synopsis","loadBooks","setState","catch","err","console","log","handleInputChange","event","target","handleFormSubmit","preventDefault","this","length","book","key","_id","Component","Detail","match","params","NoMatch","aria-label","Navbar","Brand","href","lastName","email","min","App","ConnectedPublicRoute","exact","path","component","Login","Signup","ConnectedPrivateRoute","rest","render","routeProps","pathname","from","location","Boolean","hostname","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adf14e1a.chunk.js","sourcesContent":["/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n */\n\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport { LOGIN, LOGOUT } from \"../actionTypes\";\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LOGIN: {\n            new JotBrowser('jwt', action.payload.tokens.user);\n            new JotBrowser('refreshJwt', action.payload.tokens.refresh);\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        case LOGOUT: {\n            // remove all tokens from local storage\n            const jot = new JotBrowser('jwt');\n            if (jot.getToken()) jot.eject();\n            const refreshJot = new JotBrowser('refreshJwt');\n            if (refreshJot.getToken()) refreshJot.eject();\n\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n        }\n        default:\n            return {\n                ...state,\n                details: setUserDetails()\n            };\n    }\n}\n\nconst setUserDetails = () => {\n    const jot = new JotBrowser('jwt');\n    return jot.getToken() ?\n        {\n            firstName: jot.getClaim('firstName'),\n            role: jot.getClaim('role'),\n            id: jot.getClaim('sub')\n        } :\n        null;\n}\nexport const initialState = {\n    details: setUserDetails()\n};","/**\n * Reducers specify how the application's state changes in response to actions sent to the store.\n * Remember that actions only describe what happened, but don't describe how the application's state changes.\n * @see {@link https://redux.js.org/basics/reducers}\n * \n * Here we are combinging two reducers into a single root reducer,\n * and also creating a rootState, which will be the initial state passed to the store.\n */\n\n\nimport { combineReducers } from \"redux\";   // @see {@link https://redux.js.org/api/combinereducers/}\nimport user, { initialState as userState } from \"./user\";\n\n\n/**\n * Create correctly setup initial state for root reducer\n */\nexport const rootState = {\n    user: userState\n};\n\n/**\n * Merging our separate reducers into one root reducer\n */\nexport default combineReducers({\n    user\n});","/**\n * Separate file for the declaration of action types, \n * just to keep concerns clean and clear.\n */\nexport const LOGIN  = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';","import { createStore } from \"redux\";\nimport rootReducer, { rootState } from \"./reducers\";\n\n\n/**\n * \n * @see {@link https://redux.js.org/api/createstore}\n */\nfunction configureStore(preloadedState) {\n\n    const store = createStore(\n        rootReducer,\n        preloadedState,\n        // allowing our store to be enhanced by the redux devtools (with which we can do time-travel and state inspection)\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    // Setting up hot module reloading for our reducers\n    if (process.env.NODE_ENV !== 'production' && module.hot) {\n        module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n    }\n\n    return store\n}\n\nexport default configureStore(rootState);","import React from \"react\";\n\nimport { Button, Col, Row, Container, Jumbotron } from 'react-bootstrap';\n\nexport default function Splash(props) {\n    return (\n        <Container>\n            <Row>\n                <Col >\n                    <Jumbotron fluid className='mt-4'>\n                        <h1 className='text-center'>Love To Read?</h1>\n                    </Jumbotron>\n                    <Row className=\"text-center\">\n                        <Col >\n                            <Button \n                            type=\"submit\" \n                            className=\"btn btn-primary\" \n                            onClick={() => props.history.push('/signup')}\n                            >Signup</Button>\n                        </Col>\n                        <Col >\n                            <Button \n                            type=\"submit\" \n                            className=\"btn btn-primary\"\n                            onClick={() => props.history.push('/login')}\n                            >Login</Button>\n                        </Col>\n                    </Row>\n                    <Jumbotron fluid className='mt-4'>\n                        <h1 className='text-center'>We got you Cover to Cover!</h1>\n                    </Jumbotron>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import { LOGIN, LOGOUT } from \"./actionTypes\";\n\n/**\n * \n * Actions are payloads of information that send data from your application to your store.\n * They are the only source of information for the store.\n * @see {@link https://redux.js.org/basics/actions}\n */\n\n // Fill in the properties that need to be returned\n // in each action\nexport const onLogin = (tokens) => ({\n    type: LOGIN,\n    payload: {tokens}\n});\n\nexport const onLogout = () => ({\n    type: LOGOUT\n});","import axios from \"axios\";\nimport { Browser as JotBrowser } from 'jwt-jot'\n\nimport store from '../redux/store';\nimport { onLogout } from '../redux/actions';\n\nexport default {\n    // Gets all books\n    getBooks: function () {\n        return axiosP.get(\"/books\");\n    },\n    // Gets the book with the given id\n    getBook: function (id) {\n        return axiosP.get(\"/books/\" + id);\n    },\n    // Deletes the book with the given id\n    deleteBook: function (id) {\n        return axiosP.delete(\"/books/\" + id);\n    },\n    // Saves a book to the database\n    saveBook: function (bookData) {\n        return axiosP.post(\"/books\", bookData);\n    }\n};\n\nconst axiosP = axios.create({\n    baseURL: '/api/protected'\n});\n\n// https://www.npmjs.com/package/axios#interceptors\naxiosP.interceptors.request.use(\n    async function (config) {\n        const source = axios.CancelToken.source();\n        let authHeader;\n        try {\n            authHeader = await getAuthHeaderAsync();\n        } catch (error) {\n            store.dispatch(onLogout());\n            source.cancel(`Request canceled: ${error}`);\n            return { cancelToken: source.token };\n        }\n\n        config.headers = {\n            ...config.headers,\n            ...authHeader\n        }\n\n        return config;\n    }\n);\n\nfunction getAuthHeaderAsync() {\n    const jot = new JotBrowser('jwt');\n\n    if (jot.getToken() && jot.valid()) return Promise.resolve(makeAuthHeader(jot));\n\n    const refreshJot = new JotBrowser('refreshJwt');\n\n    if (!refreshJot.getToken()) return Promise.reject('Refresh token not found on client.');\n    if (!refreshJot.valid()) return Promise.reject('Refresh token not valid on client.');\n\n    return axios.post(\"/api/auth/refresh\", { token: refreshJot.getToken() })\n        .then(res => res.data)\n        .then(data => {\n            if (data.success) {\n                // save new tokens in localstorage\n                new JotBrowser('refreshJwt', data.tokens.refresh);\n                const jot = new JotBrowser('jwt', data.tokens.user);\n                return makeAuthHeader(jot);\n            } else {\n                return Promise.reject(data.errors.token);\n            }\n        });\n}\n\nfunction makeAuthHeader(jot) {\n    return { Authorization: 'Bearer ' + jot.getToken() };\n}","import axios from \"axios\";\n\nimport protectedAPI from './protectedAPI';\n\n\nexport default {\n  signup: function (newUser) {\n    return axios.post(\"/api/auth/signup\", newUser).then(res => res.data);\n  },\n\n  login: function (credentials) {\n    return axios.post(\"/api/auth/login\", credentials).then(res => res.data);\n  },\n  ...protectedAPI\n};\n\n","import React from \"react\";\nimport {Alert} from 'react-bootstrap';\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"20\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n\nexport function ServerError(props) {\n  const {axiosError} = props;\n\n  if (!axiosError || !axiosError.response) return null;\n\n  const {statusText, status} = axiosError.response;\n  let errorObj;\n\n  if (axiosError.response.data.error) {\n    // handle custom error sent back by server\n    errorObj = axiosError.response.data.error;\n  } else {\n    errorObj = axiosError;\n  }\n\n\n  return (\n<Alert variant='danger'>\n    {status} {statusText}<br />\n    Error Name: {errorObj.name}<br />\n    Error Message: {errorObj.message}\n  </Alert>\n  );\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Col, Form, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { onLogin } from '../../redux/actions'\nimport API from '../../api'\nimport { ServerError } from '../../components/Form';\n\nconst schema = yup.object({\n    username: yup.string().required(),\n    password: yup.string().required()\n});\n\nconst Login = (props) => {\n\n    return <Modal\n        show={true}\n        onHide={() => props.history.push('/')}\n        animation={false}\n        size=\"lg\"\n        aria-labelledby=\"login-form\"\n        centered\n    >\n        <Modal.Header closeButton>\n            <Modal.Title id=\"login-form\">\n                Reading List Login\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <h5 className=\"card-title\">Login to your reading list</h5>\n            <Formik\n                initialValues={{ username: '', password: '' }}\n                validationSchema={schema}\n                onSubmit={async (values, formikBag) => {\n                    try {\n                        const data = await API.login(values);\n                        if (data.success) {\n                            props.onLogin(data.tokens);\n                        } else {\n                            formikBag.setErrors(data.errors);\n                        }\n                    } catch (err) {\n                        formikBag.setStatus(err);\n                    }\n                    return;\n                }}\n            >\n                {({\n                    status,\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <ServerError axiosError={status} />\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"username\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        name='username'\n                                        autoComplete='username'\n                                        placeholder=\"Username\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.username}\n                                        isInvalid={!!errors.username}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.username && touched.username && errors.username}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"Password\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        autoComplete='current-password'\n                                        required\n                                        name='password'\n                                        type=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                        isInvalid={!!errors.password}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password && touched.password && errors.password}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</Button>\n                        </Form>\n                    )}\n            </Formik>\n            <Link className=\"link\" to=\"/signup\">Don't have an account? <span className=\"link-signup\">Signup</span></Link>\n        </Modal.Body>\n    </Modal>;\n\n};\n\nexport default connect(\n    // mapStateToProps\n    null,\n    // mapDispatchToProps\n    { onLogin }\n)(Login);\n\n","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      ✗\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../api\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nclass Books extends Component {\n  state = {\n    books: [],\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  };\n\n  componentDidMount() {\n    this.loadBooks();\n  }\n\n  loadBooks = () => {\n    API.getBooks()\n      .then(res =>\n        this.setState({ books: res.data, title: \"\", author: \"\", synopsis: \"\" })\n      )\n      .catch(err => console.log(err));\n  };\n\n  deleteBook = id => {\n    API.deleteBook(id)\n      .then(res => this.loadBooks())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    if (this.state.title && this.state.author) {\n      API.saveBook({\n        title: this.state.title,\n        author: this.state.author,\n        synopsis: this.state.synopsis\n      })\n        .then(res => this.loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                value={this.state.title}\n                onChange={this.handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n              <Input\n                value={this.state.author}\n                onChange={this.handleInputChange}\n                name=\"author\"\n                placeholder=\"Author (required)\"\n              />\n              <TextArea\n                value={this.state.synopsis}\n                onChange={this.handleInputChange}\n                name=\"synopsis\"\n                placeholder=\"Synopsis (Optional)\"\n              />\n              <FormBtn\n                disabled={!(this.state.author && this.state.title)}\n                onClick={this.handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {this.state.books.length ? (\n              <List>\n                {this.state.books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => this.deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Books;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../api\";\n\nclass Detail extends Component {\n  state = {\n    book: {}\n  };\n  // Add code to get the book with an _id equal to the id in the route param\n  // e.g. http://localhost:3000/books/:id\n  // The book id for this route can be accessed using this.props.match.params.id\n\n  componentDidMount() {\n    API.getBook(this.props.match.params.id)\n    .then(res => {     \n      this.setState({book: res.data})\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h1>\n                {this.state.book.title} by {this.state.book.author}\n              </h1>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-10 md-offset-1\">\n            <article>\n              <h1>Synopsis</h1>\n              <p>{this.state.book.synopsis}</p>\n            </article>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-2\">\n            <Link to=\"/\">← Back to Authors</Link>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Detail;\n","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄\n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default NoMatch;\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport { Button, Navbar } from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\n\nimport { onLogout } from '../../redux/actions'\n\nconst Nav = (props) => {\n  return   <Navbar className='navbar-expand-lg navbar-dark bg-primary justify-content-between'>\n  <Navbar.Brand href=\"/\">React Reading List</Navbar.Brand>\n  {\n    props.user ?\n      <Button onClick={props.onLogout}>Logout</Button> :\n      <Link to={\"/login\"}>\n        <Button>Login</Button>\n      </Link>\n  }\n</Navbar>;\n};\n\nexport default connect(\n  // mapStateToProps\n  state => ({user: state.user.details}),\n  // mapDispatchToProps\n  { onLogout }\n)(Nav);\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Col, Form, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { onLogin } from '../../redux/actions'\nimport API from '../../api'\nimport {ServerError} from '../../components/Form';\n\n\nconst schema = yup.object({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    email: yup.string().required().email(),\n    username: yup.string().required().min(3),\n    password: yup.string().required().min(8)\n});\n\n/**\n * \n * @param {*} props \n * \n * autocomplete names\n * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete-given-name\n */\nconst Signup = (props) => {\n\n    return <Modal\n        show={true}\n        onHide={() => props.history.push('/')}\n        animation={false}\n        size=\"lg\"\n        aria-labelledby=\"signup-form\"\n        centered\n    >\n        <Modal.Header closeButton>\n            <Modal.Title id=\"signup-form\">\n                Reading List Signup\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <h5 className=\"card-title\">Signup to create your reading list</h5>\n            <Formik\n                initialValues={{ firstName: '', lastName: '', email: '', username:'', password: '' }}\n                validationSchema={schema}\n                onSubmit={async (values, formikBag) => {\n                    try {\n                        const data = await API.signup(values);\n                        if (data.success) {\n                            props.onLogin(data.tokens);\n                        } else {\n                            formikBag.setErrors(data.errors);\n                        }\n                    } catch (err) {\n                        formikBag.setStatus(err);\n                    }\n                    return;\n                }}\n            >\n                {({\n                    status,\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                                                        <ServerError axiosError={status} />\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupFirstName\">\n                                    <Form.Label>First name</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='given-name'\n                                        name='firstName'\n                                        type=\"text\"\n                                        placeholder=\"First name\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.firstName}\n                                        isInvalid={!!errors.firstName}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.firstName && touched.firstName && errors.firstName}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupLastName\">\n                                    <Form.Label>Last name</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='family-name'\n                                        name='lastName'\n                                        type=\"text\"\n                                        placeholder=\"Last name\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.lastName}\n                                        isInvalid={!!errors.lastName}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.lastName && touched.lastName && errors.lastName}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"signupEmail\">\n                                    <Form.Label>Email address</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='email'\n                                        name='email'\n                                        type=\"email\"\n                                        placeholder=\"Email address\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.email}\n                                        isInvalid={!!errors.email}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.email && touched.email && errors.email}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"username\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control\n                                        required\n                                        name='username'\n                                        autoComplete='username'\n                                        placeholder=\"Username\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.username}\n                                        isInvalid={!!errors.username}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.username && touched.username && errors.username}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"Password\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        required\n                                        autoComplete='new-password'\n                                        name='password'\n                                        type=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                        isInvalid={!!errors.password}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password && touched.password && errors.password}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Form.Row>\n                            <Button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Submit</Button>\n                        </Form>\n                    )}\n            </Formik>\n            <Link className=\"link\" to=\"/login\">Already have an account? <span className=\"link-signup\">Login</span></Link>\n        </Modal.Body>\n    </Modal>;\n\n};\n\nexport default connect(\n    // mapStateToProps\n    null,\n    // mapDispatchToProps\n    { onLogin }\n)(Signup);","import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport { connect } from 'react-redux'\n\nimport Splash from \"./pages/Splash\";\nimport Login from './pages/Login';\nimport Books from \"./pages/Books\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\nimport Signup from \"./pages/Signup\";\n\n// see https://reacttraining.com/react-router/web/example/auth-workflow\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <ConnectedPublicRoute exact path=\"/\" component={Splash} />\n          <ConnectedPublicRoute path=\"/login\" component={Login} />\n          <ConnectedPublicRoute path=\"/signup\" component={Signup} />\n          <ConnectedPrivateRoute exact path=\"/books\" component={Books} />\n          <ConnectedPrivateRoute path=\"/books/:id\" component={Detail} />\n          <Route path=\"*\"><NoMatch /></Route>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        rest.user ? (\n          <Component {...routeProps} />\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: routeProps.location }\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\nconst ConnectedPrivateRoute = connect(\n  // mapStateToProps\n  state => ({user: state.user.details})\n  )(PrivateRoute);\n\n// A wrapper for <Route> that redirects to the books \n// screen if you're authenticated.\nfunction PublicRoute({ component: Component, ...rest }) {\n\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        !rest.user ? (\n          <Component {...routeProps} />\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/books\"\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\nconst ConnectedPublicRoute = connect(\n  // mapStateToProps\n  state => ({user: state.user.details})\n  )(PublicRoute);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * Wrapping our entire app in the react-redux Provider component\n * \n * The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.\n * Since any React component in a React Redux app can be connected,\n * most applications will render a <Provider> at the top level,\n * with the entire app’s component tree inside of it.\n * Normally, you can’t use a connected component unless it is nested inside of a <Provider>.\n * \n * @see {@link https://react-redux.js.org/api/provider}\n */\nconst renderApp = () => render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n/**\n * Setting up hot module reloading for our components\n */\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./App', renderApp)\n}\nrenderApp()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}